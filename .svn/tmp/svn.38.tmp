package view;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.LayoutManager;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.HashMap;

import javax.swing.BorderFactory;
import javax.swing.BoxLayout;
import javax.swing.ButtonGroup;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JRadioButton;
import javax.swing.JScrollPane;
import javax.swing.JTabbedPane;
import javax.swing.JTable;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;

import app.MyApp;
import controller.AbstractAction;
import controller.Predfiltracija;
import controller.Row;
import controller.Search;
import model.Tabela;
import model.TableModel;

public class TableView {
	private ArrayList<TableModel> listaTabela=new ArrayList<>();
	private Tabela tabela=new Tabela();
	private JScrollPane pane1 = new JScrollPane();
	private JScrollPane pane2 = new JScrollPane(); 
	private String ime="";

	JPanel osnova=new JPanel();
	
	public TableView(ArrayList<TableModel> tabela,String ime) {
		this.listaTabela=tabela;
		this.ime=ime;
	}
	
	public JPanel iscrtavanje(int w,int h,Object[][] data,HashMap<Tabela,Object[][]> data2) {
		HashMap<Integer, Tabela> taboviRedom=new HashMap<>();
		Tabela ta=new Tabela();
		for(TableModel tt:listaTabela) {
			if(tt.getTabela().getTitle().equals(ime)) {
				ta=tt.getTabela();
			}
		}
		JPanel p=new JPanel();
		osnova.setBackground(Color.BLACK);
		p.setBackground(Color.BLACK);
		osnova.setLayout(new BoxLayout(osnova, BoxLayout.Y_AXIS));
		JButton ad=new JButton("Add");
		
		JButton re=new JButton("Remove");
		JButton up=new JButton("Update");
		JButton ser=new JButton("Search");
		JButton dePo=new JButton("Demote"); //demote ili promote 
		dePo.setPreferredSize(new Dimension(70,30));
     
		ad.setPreferredSize(new Dimension(70, 30));
		re.setPreferredSize(new Dimension(70, 30));
		up.setPreferredSize(new Dimension(70, 30));
		ser.setPreferredSize(new Dimension(70, 30));
	     JTabbedPane tab=new JTabbedPane();
		JPanel gornjiL=new JPanel();
		gornjiL.setLayout((LayoutManager) new FlowLayout(FlowLayout.RIGHT,5,5));
		gornjiL.add(ad);
		gornjiL.add(re);
		gornjiL.add(up);
		gornjiL.add(ser);
		JPanel gornjiD=new JPanel(new FlowLayout(FlowLayout.RIGHT,90,5));
		gornjiD.add(dePo,BorderLayout.EAST);
		JPanel gornji=new JPanel();
		//gornji.add(p12,BorderLayout.WEST);
		gornji.add(gornjiL);
		gornji.add(gornjiD);
	
		JPanel dugTab=new JPanel();
		dugTab.setLayout(new BoxLayout(dugTab, BoxLayout.Y_AXIS));
		dugTab.add(gornji);
		dugTab.setBackground(Color.BLACK);
		
		
		JButton ad2=new JButton("Add");
		JButton re2=new JButton("Remove");
		JButton up2=new JButton("Update");
		JButton ser2=new JButton("Search");
		JButton dePo2=new JButton("Promote"); //demote ili promote 
		dePo2.setPreferredSize(new Dimension(70,30));
		ad2.setPreferredSize(new Dimension(70, 30));
		re2.setPreferredSize(new Dimension(70, 30));
		up2.setPreferredSize(new Dimension(70, 30));
		ser2.setPreferredSize(new Dimension(70, 30));
		
		JPanel gornjiL2=new JPanel();
		gornjiL2.setLayout((LayoutManager) new FlowLayout(FlowLayout.RIGHT,5,5));
		gornjiL2.add(ad2);
		gornjiL2.add(re2);
		gornjiL2.add(up2);
		gornjiL2.add(ser2);
		JPanel gornjiD2=new JPanel(new FlowLayout(FlowLayout.RIGHT,90,5));
		gornjiD2.add(dePo2,BorderLayout.EAST);
		JPanel gornji2=new JPanel();
		//gornji.add(p12,BorderLayout.WEST);
		gornji2.add(gornjiL2);
		gornji2.add(gornjiD2);
	
		JPanel dugTab2=new JPanel();
		dugTab2.setLayout(new BoxLayout(dugTab2, BoxLayout.Y_AXIS));
		dugTab2.add(gornji2);
		dugTab2.setBackground(Color.BLACK);
		
		
		for(TableModel t:listaTabela) {
			if(t.getTabela().getTitle().equals(ime)) {
				tabela=t.getTabela();
			}
			
		}
		Row row=new Row();
		String[] columnNames = row.uzmiHeadere(tabela);
		//for(String ss: columnNames) {
		//	System.out.println(ss);
		//}
		 JTable table = new JTable(data, columnNames);
		 table.setName(tabela.getTitle());//dodao ivan
		 
		 ad.addActionListener(new ActionListener() {
				
				@Override
				public void actionPerformed(ActionEvent e) {
					// TODO Auto-generated method stub
				
					AddUpdateView aa = new AddUpdateView(tabela,table);
					
				}
			});
			
		   ser.addActionListener(new ActionListener() {
				
				@Override
				public void actionPerformed(ActionEvent arg0) {
					// TODO Auto-generated method stub
					Search ss = new Search(data,columnNames,table.getName(),tabela);
				}
			});
	//	 table.setFillsViewportHeight(true);

 if(data2.size()!=0) {
	// p.setLayout(new BoxLayout(p, BoxLayout.Y_AXIS));
	// table.setPreferredScrollableViewportSize(new Dimension(w-10,h/2));
	// table.setEnabled(false);
	
	 pane2.setViewportView(table);
		pane2.revalidate();
		pane2.repaint();
     p.add(pane2,BorderLayout.CENTER);
     dugTab.add(pane2);
     dugTab.setBorder(BorderFactory.createLineBorder(Color.WHITE));
     osnova.add(dugTab);

     int brojac=0;
     for(Tabela s:data2.keySet()) {
    	 String[] columnDete = row.uzmiHeadere(s);
    	
    	 try {
    		 JTable tableDete = new JTable(data2.get(s), columnDete);
    		 tableDete.setName(s.getTitle());//dodao ivan
    		
    		 ad2.addActionListener(new ActionListener() {
 				
 				@Override
 				public void actionPerformed(ActionEvent e) {
 					// TODO Auto-generated method stub
 				
 					AddUpdateView aa = new AddUpdateView(s,tableDete);
 					
 				}
 			});
    		   ser2.addActionListener(new ActionListener() {
   				
   				@Override
   				public void actionPerformed(ActionEvent arg0) {
   					// TODO Auto-generated method stub
   					Search ss = new Search(data2.get(s),columnDete,tableDete.getName(),s);   				}
   			});
    		 tableDete.setFillsViewportHeight(true);
		//	 tableDete.setPreferredScrollableViewportSize(new Dimension(w-10,h/2));
    		 pane1.setViewportView(tableDete);
    			pane1.revalidate();
    			pane1.repaint();
    		 tableDete.setEnabled(false);
			 JPanel pp=new JPanel();
		     pp.setBackground(Color.BLACK);
		     pp.setPreferredSize(new Dimension(w-10,h/2));
			// pp.add(tableDete);
			 pp.add(pane1);
			 int c=brojac+1;
			 tab.add("Tab "+c,pane1);
			 Integer rbr=new Integer(brojac);
			 tab.setBackground(Color.BLACK);
			 taboviRedom.put(rbr, s);
			 
			 dugTab2.add(tab);
			 dugTab2.setBorder(BorderFactory.createLineBorder(Color.WHITE));
				osnova.add(dugTab2);
    	 } catch (Exception e) {
 			// TODO: handle exception
 		}
    	 
    	 brojac++;
     }		
	 }
	else {
		//	 table.setPreferredScrollableViewportSize(new Dimension(w,h/2));
		//	 table.setPreferredSize(new Dimension(w, h/2));
			 table.setEnabled(false);
	//	pane1.add(table);
		pane1.setViewportView(table);
		pane1.revalidate();
		pane1.repaint();
		// p.add(table);
		     p.add(pane1);
		   
		     
		     dugTab.add(pane1);
		    
		     dugTab.setBorder(BorderFactory.createLineBorder(Color.WHITE));
		     osnova.add(dugTab);
}
		
dePo.addActionListener(new ActionListener() { //mora pitati ako ima vise roditelja u kog ce!!!!!!!!!!!!!!!!!!!!!
	
	@Override
	public void actionPerformed(ActionEvent e) {
		// TODO Auto-generated method stub
		Tabela trazena=new Tabela();
		for(TableModel t:listaTabela) {
			if(t.getTabela().getTitle().equals(ime)) {
				trazena=t.getTabela();
			}
		}
		
		Tabela roditelj=new Tabela();
		ArrayList<String> roditelji=trazena.getParent();
		if(roditelji.size()==0) {
			JOptionPane.showMessageDialog(null, "Table doesn't have a parent. It can not be demoted!", "Error", 1);
		}else if(roditelji.size()>1) {
			//////////////////////////////////////////////////////////////////////////////////////////////////////////
			JFrame validationFrame = new JFrame("Parents");
			validationFrame.setLayout(new FlowLayout());
			validationFrame.setResizable(true);
			JRadioButton birdButton;
			ButtonGroup group = new ButtonGroup();
			

			for(String s:roditelji) {
				birdButton = new JRadioButton(s);
				birdButton.setSelected(false);
				validationFrame.add(birdButton);
	
				birdButton.addActionListener(new ActionListener() {
					
					@Override
					public void actionPerformed(ActionEvent e) {
						// TODO Auto-generated method stub
						System.out.println("/////////////"+s);
						for(TableModel t:listaTabela) {
							if(t.getTabela().getTitle().equals(s)) { // ovaj mu je roditelj
								//System.out.println("/////////////"+t.getTitle());
								ArrayList<Tabela> decica3=new ArrayList<>();
								for(TableModel ta:listaTabela) {
									if(ta.getTabela().getParent().size()!=0) {
										for(String roda:ta.getTabela().getParent()) {
											if(roda.equals(t.getTabela().getTitle())) {
												System.out.println(roda);
												decica3.add(ta.getTabela());
											}
										}
									}
								}
							
								Row rw=new Row(); 
								Object[][] data=rw.konekcijaSaBazom(t.getTabela());
								HashMap<Tabela, Object[][]> data2=rw.konekcijaSaBazomDeca(decica3);
								TableView is=new TableView(listaTabela,t.getTabela().getTitle());
								JPanel pa=is.iscrtavanje(w,h,data,data2);
								MyApp.getInstance().addToCentralPanel2(pa);

								
								
							}
						}
						validationFrame.dispose();
						
					}
				});
				
				group.add(birdButton);
			}
			
			//validationFrame.add(iza,BorderLayout.SOUTH);
		     validationFrame.setSize(500, 80);
		     validationFrame.setLocationRelativeTo(null);
		     validationFrame.setVisible(true);
		}else{
			String rod="";
			for(String s:trazena.getParent()) {
				rod=s;
			}
			for(TableModel t:listaTabela) {
				if(t.getTabela().getTitle().equals(rod)) {
					roditelj=t.getTabela();
				}
			}
			ArrayList<Tabela> decica2=new ArrayList<>();
			for(TableModel t:listaTabela) {
				if(t.getTabela().getParent().size()!=0) {
					for(String roda:t.getTabela().getParent()) {
						if(roda.equals(roditelj.getTitle())) {
							decica2.add(t.getTabela());
						}
					}
				}
			}
			Row rw=new Row(); 
			Object[][] data=rw.konekcijaSaBazom(roditelj);
			HashMap<Tabela, Object[][]> data2=rw.konekcijaSaBazomDeca(decica2);
			TableView is=new TableView(listaTabela,roditelj.getTitle());
			JPanel pa=is.iscrtavanje(w,h,data,data2);
			MyApp.getInstance().addToCentralPanel2(pa);

			
		}
		
	}
});
 
dePo2.addActionListener(new ActionListener() { //promote
	
	@Override
	public void actionPerformed(ActionEvent e) {
		// TODO Auto-generated method stub
		Tabela trazena=new Tabela();
		int selektovani=tab.getSelectedIndex(); //naziv taba je ovo +1
		if(taboviRedom.containsKey(selektovani)) {
			trazena=taboviRedom.get(selektovani);
		}
		ArrayList<Tabela> decica=new ArrayList<>();
		//System.out.println(trazena.getTitle());
		for(TableModel t:listaTabela) {
			if(t.getTabela().getParent().size()!=0) {
				for(String rod:t.getTabela().getParent()) {
					if(rod.equals(trazena.getTitle())) {
						decica.add(t.getTabela());
					}
				}
			}
		}
		Row rw=new Row(); 
		Object[][] data=rw.konekcijaSaBazom(trazena);
		HashMap<Tabela, Object[][]> data2=rw.konekcijaSaBazomDeca(decica);
		TableView is=new TableView(listaTabela,trazena.getTitle());
		//System.out.println((mainFrame.getWidth()-levi.getWidth())+" "+(mainFrame.getHeight()));
		JPanel pa=is.iscrtavanje(w,h,data,data2);
		MyApp.getInstance().addToCentralPanel2(pa);
	}
});
	
 table.getSelectionModel().addListSelectionListener(new ListSelectionListener(){
     public void valueChanged(ListSelectionEvent event) {
         //System.out.println(table.getValueAt(table.getSelectedRow(), 0).toString());
    	
    	 Predfiltracija pf=new Predfiltracija();
    	 pf.filtriraj(listaTabela,ime, table, w, h);
     }
 });

 
 
		return osnova;
		
		
	}
}
