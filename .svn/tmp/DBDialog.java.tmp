package view;

import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.Font;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

import javax.swing.BoxLayout;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JPasswordField;
import javax.swing.JTextField;

import app.MyApp;
import controller.ConnectionDB;

public class DBDialog extends JFrame{
    
	private JFrame credentialsFrame = new JFrame("Credentials");
	private JPanel text1 = new JPanel();
	private JPanel text2 = new JPanel();
	private JLabel t1 = new JLabel("SQL DATABASE DIALOG\n");
	private JLabel t2 = new JLabel("-------Please enter your credentials--------");
	private JPanel p1 = new JPanel();
	private JPanel p2 = new JPanel();
	private JPanel p3 = new JPanel();
	private JPanel p4 = new JPanel();
	private JPanel main = new JPanel();
	private JLabel ip = new JLabel("     IP:           ");
	private JLabel userName = new JLabel("Username: ");
	private JLabel password = new JLabel("Password: ");
	private JTextField ipText = new JTextField();
	private JTextField userNameText = new JTextField();
	private JPasswordField passwordText = new JPasswordField();
	private JButton conf =  new JButton("Confirm");
	
	public DBDialog() {
		ipText.setPreferredSize(new Dimension(200, 30));
		userNameText.setPreferredSize(new Dimension(200, 30));
		passwordText.setPreferredSize(new Dimension(200, 30));
		
		main.setPreferredSize(new Dimension(600, 400));
		main.setLayout(new BoxLayout(main, BoxLayout.Y_AXIS));
		p1.setLayout(new FlowLayout());
		p2.setLayout(new FlowLayout());
		p3.setLayout(new FlowLayout());
		p4.setLayout(new FlowLayout());
		t1.setFont(new Font("Serif", Font.PLAIN, 16));
	    t2.setFont(new Font("Arial", Font.PLAIN, 14));
	    text1.add(t1);
	    text2.add(t2);
	    p1.add(ip);
	    p1.add(ipText);
	    p2.add(userName);
	    p2.add(userNameText);
	    p3.add(password);
	    p3.add(passwordText);
	    p4.add(conf);
<<<<<<< .mine
	   
||||||| .r117
=======
>>>>>>> .r118
	    main.add(text1);
	    main.add(text2);
	    main.add(p1);
	    main.add(p2);
	    main.add(p3);
	    main.add(p4);
	    
	    conf.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				
				if(ipText.getText().equals("") || userNameText.getText().equals("")||passwordText.getText().equals("")) {
					
					JOptionPane.showMessageDialog(null, "Text fields are mandatory!", "Error",0);
				}
				else {
					String ip = ipText.getText();
					String ime = userNameText.getText();
					@SuppressWarnings("deprecation")
					String pass =passwordText.getText();
					ConnectionDB db =  new ConnectionDB();
				if(db.connect(ip, ime, pass)) {
					MyApp.getInstance().setIp(ip);
					MyApp.getInstance().setUsername(ime);
					MyApp.getInstance().setPass(pass);
					
					 MyApp.getInstance().setSource(true);
						MyApp.getInstance().dispose();
						MyApp.getInstance().initialise();
						MyApp.getInstance().revalidate();
						MyApp.getInstance().repaint();
						MyApp.getInstance().setVisible(true);
						credentialsFrame.dispose();
				}
				}
				
			}
		});
<<<<<<< .mine
	 
||||||| .r117
=======

>>>>>>> .r118
	    credentialsFrame.add(main);
	    
	    credentialsFrame.setPreferredSize(new Dimension(600, 400));
	    credentialsFrame.setDefaultCloseOperation(EXIT_ON_CLOSE);
	    credentialsFrame.pack();
	    credentialsFrame.setLocationRelativeTo(null);
	    credentialsFrame.setVisible(true);

	}
	
}
