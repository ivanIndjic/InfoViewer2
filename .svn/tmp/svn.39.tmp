package controller;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.LinkedHashMap;

import javax.swing.AbstractButton;
import javax.swing.ButtonGroup;
import javax.swing.JOptionPane;
import javax.swing.JRadioButton;
import javax.swing.JTextField;

import model.Tabela;

public class AddData implements AbstractAction{
	
	private ArrayList<JTextField> polja = new ArrayList<>();
	public LinkedHashMap<String, Object> glavno = new LinkedHashMap<>();
	private Tabela t = new Tabela();
	String query="";
	private ArrayList<JTextField> mandatory = new ArrayList<>();
	private ArrayList<ButtonGroup> dugmad = new ArrayList<>();
	private ArrayList<JRadioButton> but = new ArrayList<>();
	public AddData(ArrayList<JTextField> polja,ArrayList<ButtonGroup> dugmad,ArrayList<JRadioButton>but,Tabela t,LinkedHashMap<String,Object> g) {
		this.polja = polja;
		this.dugmad=dugmad;
		this.but=but;
		this.t=t;
		glavno=g;
		addData();
	}

	@Override
	public boolean addData() {
		// TODO Auto-generated method stub
		for(int i=0;i<polja.size();i++) {
			if(polja.get(i).getToolTipText().equals("mandatory") ) {
				mandatory.add(polja.get(i));
			}
		}
		
		int flag=0;
		
		for(int i=0;i<mandatory.size();i++) { 
			if(mandatory.get(i).getText().equals("")) {
				flag=1;
				break;
			}
		}
		
		for(int i=0;i<dugmad.size();i++) {
			if(dugmad.get(i).getSelection()==null) {
				flag=1;
				break;
			}
		}
		
		
		if(flag==1)
			JOptionPane.showMessageDialog(null, "All mandatory fields must not be empty!\n", "Error", 1);
		else {
			String imE = "";
			if(t.getTitle().contains(" "))
				imE = t.getTitle().replaceAll(" ", "_");
			else
				imE = t.getTitle();
			query="insert into "+imE+" (";
			for(int i=0;i<t.getAttributes().size();i++) {
				if(i+1==t.getAttributes().size())
					query+=t.getAttributes().get(i).getCode()+")";
				else	
				query+=t.getAttributes().get(i).getCode()+",";
			}
			query+= " values (";
		
		//	System.out.println(query);
			int counter=-1;
			for(String s : glavno.keySet()) {
				++counter;
				
				if(glavno.get(s) instanceof JTextField) {
					JTextField f= (JTextField) glavno.get(s);
					if(t.getAttributes().get(counter).getType().equals("number")) {
					if(f.getText().equals(""))
						query+="null"+",";
					else
						query+=f.getText() +",";
					}
					else {
						
						if(f.getText().equals(""))
							query+="\'\'"+",";
						else
							query+="\'"+f.getText()+"\'"+",";
							
					}
				}
				else if(glavno.get(s) instanceof ButtonGroup) {
					ButtonGroup bg = (ButtonGroup) glavno.get(s);
					 for (Enumeration<AbstractButton> buttons = bg.getElements(); 
							 buttons.hasMoreElements();) {
				            AbstractButton button = buttons.nextElement();

				            if (button.isSelected()) {
				                if(button.getText().equals("True"))
				                	query+="1"+",";
				                if(button.getText().equals("False"))				                
				                	query+="0"+",";
				            }
				        }
				}
				
				
			}
			query+=");";
			
			query = query.replace(",);", ");");
			
			Connection conn;
			try {
				conn = DriverManager.getConnection("jdbc:jtds:sqlserver://147.91.175.155/psw-2018-tim2-4","psw-2018-tim2-4","tim2-413090834");
			
			
			PreparedStatement pstmt = conn.prepareStatement(query);
            pstmt.executeUpdate();
			
			
			pstmt.close();
			
			} catch (SQLException ex) {
				if(ex.getErrorCode()==2627)
					JOptionPane.showMessageDialog(null, "Cannot insert duplicate key!\n", "Error", 1);
			}
			
			
		}
		return true;
		
	}

	@Override
	public boolean removeData() {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public boolean updateData() {
		// TODO Auto-generated method stub
		return false;
	}
	
	

}
